dotfiles_dir = "Desktop/dotfiles"
# This is a global variable, so a separate `public.toml` must exist to remove it
gpg_user_id = "Rijul"

[settings]
vars = [ "secrets.toml" ]
prehooks = [
    "/usr/bin/mkdir -p ~/.config/scripts/common",
    "/usr/bin/mkdir -p ~/.zsh",
    "/usr/bin/mkdir -p ~/.config/Code/User",
    "/usr/bin/mkdir -p ~/.config/systemd/user",
]
posthooks = [
    "/usr/bin/ln -f ~/.config/scripts/common/* ~/.local/bin/",
]

#### These are common across all profiles
[settings.dots]
gitconfig = { source = "individual/gitconfig", target = ".gitconfig" }
npmrc = { source = "individual/npmrc", target = ".npmrc" }
tmuxconf = { source = "individual/tmuxconf", target = ".tmux.conf" }
vimrc = { source = "individual/vimrc", target = ".vimrc" }
zshrc = { source = "zsh/zshrc", target = ".zshrc" }
zsh_init = { source = "zsh/init.zsh", target = ".zsh/init.zsh" }
code_config = { source = "individual/vscode.json", target = ".config/Code/User/settings.json" }
brownie_config = { source = "individual/brownie.yaml", target = "brownie-config.yaml" }
gnupg_config = { source = "individual/gnupgconf", target = ".gnupg/gpg-agent.conf" }
syncthing_service = { source = "services/syncthing.service", target = ".config/systemd/user/syncthing.service" }
autorestic_service = { source = "services/autorestic@.service", target = ".config/systemd/user/autorestic@.service" }
common_scripts = { source = "scripts/common", target = ".config/scripts/common" }

[profiles.laptop]
# Unfortunately bombadil does not quit if a prehook fails, so checking if we are root is pointless
# As a workaround, add /usr/bin/sudo to each posthook
prehooks = [
    # "/bin/bash -c 'if [ $(id -u) -ne 0 ]; then exit 1; fi;'",
    "/usr/bin/sudo /usr/bin/rm -f /etc/systemd/system/ath11k-suspend.service",
    "/usr/bin/sudo /usr/bin/rm -f /etc/systemd/system/fix-mic-led.service",
    "/usr/bin/sudo /usr/bin/rm -f /etc/systemd/system/trackpoint-parameters.path",
    "/usr/bin/sudo /usr/bin/rm -f /etc/systemd/system/trackpoint-parameters.service",
    "/usr/bin/sudo /usr/bin/systemctl daemon-reload",
]
posthooks = [
    # Without these services, the laptop cannot function as intended
    "/usr/bin/sudo /usr/bin/ln -s ~/.config/systemd/user/ath11k-suspend.service /etc/systemd/system/ath11k-suspend.service",
    "/usr/bin/sudo /usr/bin/ln -s ~/.config/systemd/user/fix-mic-led.service /etc/systemd/system/fix-mic-led.service",
    "/usr/bin/sudo /usr/bin/ln -s ~/.config/systemd/user/trackpoint-parameters.path /etc/systemd/system/trackpoint-parameters.path",
    "/usr/bin/sudo /usr/bin/ln -s ~/.config/systemd/user/trackpoint-parameters.service /etc/systemd/system/trackpoint-parameters.service",
    "/usr/bin/sudo /usr/bin/systemctl daemon-reload",
    "/usr/bin/sudo /usr/bin/systemctl enable ath11k-suspend",
    "/usr/bin/sudo /usr/bin/systemctl enable --now fix-mic-led",
    "/usr/bin/sudo /usr/bin/systemctl enable --now trackpoint-parameters.path",
]

[profiles.laptop.dots]
# SSH agent required by KeePassXC
ssh_agent_service = { source = "services/ssh-agent.service", target = ".config/systemd/user/ssh-agent.service" }
# SSH configuration, which only goes on the laptop and nowhere else
ssh_config = { source = "individual/sshconfig", target = ".ssh/config" }
# Timer for backup
autorestic_laptop_timer = { source = "services/autorestic@laptop.timer", target = ".config/systemd/user/autorestic@laptop.timer" }
## Laptop specific dots
ath11k_service = { source = "services/ath11k-suspend.service", target = ".config/systemd/user/ath11k-suspend.service" }
fix_mic_led_service = { source = "services/fix-mic-led.service", target = ".config/systemd/user/fix-mic-led.service" }
trackpoint_parameters_path = { source = "services/trackpoint-parameters.path", target = ".config/systemd/user/trackpoint-parameters.path" }
trackpoint_parameters_service = { source = "services/trackpoint-parameters.service", target = ".config/systemd/user/trackpoint-parameters.service" }

#### These are only linked under the `local` profile
[profiles.local]
prehooks = [
    "/usr/bin/mkdir -p ~/.config/bazarr",
    "/usr/bin/mkdir -p ~/.config/scripts/drive_check",
    "/usr/bin/mkdir -p ~/.config/filebrowser",
    "/usr/bin/mkdir -p ~/.config/flood",
    "/usr/bin/mkdir -p ~/.config/jellyfin",
    "/usr/bin/mkdir -p ~/.config/rtorrent",
    "/usr/bin/mkdir -p ~/.config/systemd/user/autorestic@drive.service.d",
    "/usr/bin/mkdir -p ~/.config/systemd/user/syncthing.conf.d",
    "/usr/bin/mkdir -p ~/.config/scripts/kodi",
    "/usr/bin/mkdir -p ~/.kodi/userdata/keymaps",
    "/usr/bin/mkdir -p ~/.config/udev",
    "/usr/bin/sudo /usr/bin/mkdir -p /etc/udev/hwdb.d",
    "/usr/bin/sudo /usr/bin/rm -f /etc/udev/hwdb.d/remote.hwdb",
    "/usr/bin/systemctl --user daemon-reload",
]
posthooks = [
    "/usr/bin/systemctl --user daemon-reload",
    "/usr/bin/sudo /usr/bin/ln -s ~/.config/udev/remote.hwdb /etc/udev/hwdb.d/remote.hwdb",
    "/usr/bin/sudo /usr/bin/systemd-hwdb update",
    "/usr/bin/sudo /usr/bin/udevadm trigger",
    "echo 'Create new SSH key for tunnel destination and add it'",
]

[profiles.local.dots]
## Timers, most of which have the same setting
bazarr_timer = { source = "services/bazarr.timer", target = ".config/systemd/user/bazarr.timer" }
dave_timer = { source = "services/bazarr.timer", target = ".config/systemd/user/dave.timer" }
filebrowser_timer = { source = "services/bazarr.timer", target = ".config/systemd/user/filebrowser.timer" }
# Flood depends on rtorrent and complains without it, so give it a timer too
flood_timer = { source = "services/bazarr.timer", target = ".config/systemd/user/flood.timer" }
jellyfin_timer = { source = "services/bazarr.timer", target = ".config/systemd/user/jellyfin.timer" }
radarr_timer = { source = "services/bazarr.timer", target = ".config/systemd/user/radarr.timer" }
rtorrent_timer = { source = "services/bazarr.timer", target = ".config/systemd/user/rtorrent.timer" }
sonarr_timer = { source = "services/bazarr.timer", target = ".config/systemd/user/sonarr.timer" }
syncthing_timer = { source = "services/bazarr.timer", target = ".config/systemd/user/syncthing.timer" }
# Scheduled timer
autorestic_local_timer = { source = "services/autorestic@local.timer", target = ".config/systemd/user/autorestic@local.timer" }
autorestic_drive_timer = { source = "services/autorestic@drive.timer", target = ".config/systemd/user/autorestic@drive.timer" }
autorestic_drive_override = {source = "services/override-after-drive.conf", target = ".config/systemd/user/autorestic@drive.service.d/override.conf" }

## Services and the unique timers that come with them
bazarr_service = { source = "services/bazarr.service", target = ".config/systemd/user/bazarr.service" }
caddy_service = { source = "services/caddy.service", target = ".config/systemd/user/caddy.service" }
dave_service = { source = "services/dave.service", target = ".config/systemd/user/dave.service" }
drive_check_service = { source = "services/drive-check.service", target = ".config/systemd/user/drive-check.service" }
drive_check_scripts = { source = "scripts/drive_check/run.py", target = ".config/scripts/drive_check/run.py" }
drive_check_env = { source = "envs/drive_check", target = ".config/scripts/drive_check/env" }
# To help speed up boot, this timer is shorter than the others, since only after this is done can others start
drive_check_timer = { source = "services/drive-check.timer", target = ".config/systemd/user/drive-check.timer" }
drive_warn_service = { source = "services/drive-warn.service", target = ".config/systemd/user/drive-warn.service" }
filebrowser_service = { source = "services/filebrowser.service", target = ".config/systemd/user/filebrowser.service" }
flood_service = { source = "services/flood.service", target = ".config/systemd/user/flood.service" }
jackett_service = { source = "services/jackett.service", target = ".config/systemd/user/jackett.service" }
jellyfin_service = { source = "services/jellyfin.service", target = ".config/systemd/user/jellyfin.service" }
jellyfin_config = { source = "envs/jellyfin", target = ".config/jellyfin/env" }
radarr_service = { source = "services/radarr.service", target = ".config/systemd/user/radarr.service" }
reverse_tunnel_service = { source = "services/reverse-tunnel-@.service", target = ".config/systemd/user/reverse-tunnel-@.service" }
rtorrent_service = { source = "services/rtorrent.service", target = ".config/systemd/user/rtorrent.service" }
sonarr_service = { source = "services/sonarr.service", target = ".config/systemd/user/sonarr.service" }
# Drive dependency
syncthing_service_override = { source = "services/override-after-drive.conf", target = ".config/systemd/user/syncthing.service.d/override.conf" }

## Kodi
kodi_autostart = { source = "services/kodi.desktop", target = ".config/autostart/kodi.desktop" }
kodi_script = { source = "scripts/kodi/jellyfin-helper.py", target = ".config/scripts/kodi/jellyfin-helper.py" }
remote_db = { source = "kodi/remote.hwdb", target = ".config/udev/remote.hwdb" }
keymap = { source = "kodi/remote.xml", target = ".kodi/userdata/keymaps/remote.xml" }

## rtorrent config
rtorrent_config = { source = "individual/rtorrentconf", target = ".config/rtorrent/config" }